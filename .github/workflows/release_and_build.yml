name: Build, Release, and Notify
on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download additional dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L -o ffmpeg.tar.xz https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz
          mkdir -p dependencies
          tar -xf ffmpeg.tar.xz -C dependencies
          mv dependencies/ffmpeg-master-latest-linux64-gpl dependencies/ffmpeg
          rm ffmpeg.tar.xz

          curl -L -o ungoogled-chromium.tar.xz https://github.com/LordTwix/ungoogled-chromium-binaries/releases/download/87.0.4280.67-1.1/ungoogled-chromium_87.0.4280.67-1.1_linux.tar.xz
          mkdir -p dependencies
          tar -xf ungoogled-chromium.tar.xz -C dependencies
          mv dependencies/ungoogled-chromium_87.0.4280.67-1.1_linux dependencies/ungoogled-chromium
          rm ungoogled-chromium.tar.xz

          curl -L -o flash_player_patched_ppapi_linux.x86_64.tar.gz https://github.com/darktohka/clean-flash-builds/releases/download/v1.7/flash_player_patched_ppapi_linux.x86_64.tar.gz
          mkdir -p dependencies/ungoogled-chromium/extensions
          tar -xzvf flash_player_patched_ppapi_linux.x86_64.tar.gz \
          -C dependencies/ungoogled-chromium/extensions \
          libpepflashplayer.so
          rm flash_player_patched_ppapi_linux.x86_64.tar.gz

      - name: Download additional dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o ffmpeg.zip https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip
          tar -xf ffmpeg.zip -C dependencies
          move dependencies\ffmpeg-master-latest-win64-gpl dependencies\ffmpeg
          rm ffmpeg.zip

          curl -L -o ungoogled-chromium.zip https://github.com/tangalbert919/ungoogled-chromium-binaries/releases/download/87.0.4280.67-1/ungoogled-chromium_87.0.4280.67-1.1_windows-x64.zip
          tar -xf ungoogled-chromium.zip -C dependencies
          move dependencies\ungoogled-chromium_87.0.4280.67-1.1_windows dependencies\ungoogled-chromium
          rm ungoogled-chromium.zip

          mkdir dependencies\chromedriver
          curl -L -o chromedriver.zip https://chromedriver.storage.googleapis.com/87.0.4280.20/chromedriver_win32.zip
          tar -xf chromedriver.zip -C dependencies\chromedriver
          rm chromedriver.zip

          curl -L -o ChineseFlash-Patched.7z https://github.com/darktohka/clean-flash-builds/releases/download/v1.52/ChineseFlash-Patched-Win-34.0.0.330.7z
          7z x ChineseFlash-Patched.7z -oChineseFlash-Patched
          mkdir dependencies\ungoogled-chromium\extensions
          copy ChineseFlash-Patched\flash64\pepflashplayer64_34_0_0_330.dll dependencies\ungoogled-chromium\extensions\pepflashplayer.dll

      - name: Build with PyInstaller
        run: pyinstaller GoExport.spec

      - name: Copy required files to dist
        run: |
          mkdir -p dist/assets
          mkdir -p dist/server
          cp readme.md dist/
          cp LICENSE dist/
          cp -r assets/* dist/assets/
          cp -r server/* dist/server/

      - name: Build installer (Windows only)
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        if: matrix.os == 'windows-latest'
        with:
          path: setup\GoExport.iss
          options: /O+

      - name: Archive Linux Build
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf goexport_linux_portable_amd64.tar.gz -C dist .
          mv goexport_linux_portable_amd64.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: dist/
          if-no-files-found: ignore

  changelog:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      changelog: ${{ steps.extract.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract changelog
        id: extract
        run: |
          section=$(awk '/## \['"${GITHUB_REF_NAME#v}"'\]/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$section" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/**/goexport_linux_portable_amd64.tar.gz
            artifacts/**/goexport_win_installer_amd64.exe
          body: ${{ needs.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  discord_notify:
    runs-on: ubuntu-latest
    needs: [changelog, release]
    steps:
      - name: Notify Discord
        run: |
          repo_name="${GITHUB_REPOSITORY#*/}"
          tag="${GITHUB_REF_NAME}"

          changelog='${{ needs.changelog.outputs.changelog }}'

          payload=$(jq -n \
            --arg role "<@&1346974681399427153>" \
            --arg repo "$repo_name" \
            --arg tag "$tag" \
            --arg changelog "$changelog" \
            --arg channel "<#1347670260844855376>" \
            '{content: "\($role)\n\n# \($repo) - \($tag)\n\n\($changelog)\n\n\($channel)"}')

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK }}
