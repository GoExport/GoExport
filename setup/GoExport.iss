; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "GoExport"
#define MyAppVersion "0.16.0"
#define MyAppPublisher "LexianDEV"
#define MyAppURL "https://goexport.lexian.dev/"
#define MyAppExeName "GoExport.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8AE56AFA-B6B3-4455-BCAD-7D82E2051EA0}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userpf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=..\LICENSE
OutputBaseFilename=goexport_win_installer_amd64
Compression=lzma
SolidCompression=yes
AllowUNCPath=False
UsePreviousAppDir=False
OutputDir=..\dist
ArchitecturesAllowed=x64compatible

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
;VCRedist

Source: "..\redist\vcredist_x64.exe"; DestDir: "{app}\vendor"

;Main files
Source: "..\dist\GoExport.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\server\*"; DestDir: "{app}\server"; Flags: ignoreversion recursesubdirs createallsubdirs
;Install required dlls
Source: "..\ScreenCaptureRecorder.ini"; DestDir: "{userappdata}"; Flags: onlyifdoesntexist ignoreversion
;Install required dlls
Source: "..\libs\audio_sniffer-x64.dll"; DestDir: "{app}\vendor"; Flags: onlyifdoesntexist 64bit
Source: "..\libs\screen-capture-recorder-x64.dll"; DestDir: "{app}\vendor"; Flags: onlyifdoesntexist 64bit
;Documentation files (optional)
Source: "..\docs\*"; DestDir: "{app}\docs"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: ShouldInstallDocs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
; Append {app} to the user's PATH
Root: "HKCU"; \
    Subkey: "Environment"; \
    ValueType: expandsz; \
    ValueName: "Path"; \
    ValueData: "{olddata};{app}"; \
    Flags: preservestringtype
;Add custom protocol goexport://
Root: HKCR; Subkey: "goexport"; ValueType: string; ValueName: ""; \
    ValueData: "URL:GoExport Protocol"; Flags: uninsdeletekey
Root: HKCR; Subkey: "goexport"; ValueType: string; ValueName: "URL Protocol"; \
    ValueData: ""; Flags: uninsdeletekey
Root: HKCR; Subkey: "goexport\DefaultIcon"; ValueType: string; \
    ValueData: "{app}\GoExport_CLI.exe,1"
Root: HKCR; Subkey: "goexport\shell\open\command"; ValueType: string; \
    ValueData: """{app}\GoExport_CLI.exe"" --protocol ""%1""";

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: {app}\vendor\vcredist_x64.exe; Parameters: "/passive /Q:a /c:""msiexec /qb /i vcredist.msi"" "; StatusMsg: Installing MSVC 2010 64 bit RunTime...; MinVersion: 0,6.0.6000; Check: IsWin64
Filename: regsvr32; WorkingDir: {app}; Parameters: /s vendor\screen-capture-recorder-x64.dll; Check: IsWin64
Filename: regsvr32; WorkingDir: {app}; Parameters: /s vendor\audio_sniffer-x64.dll; MinVersion: 0,6.0.6000; Check: IsWin64
Filename: "{app}\{#MyAppExeName}"; Flags: nowait postinstall skipifsilent; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"

[UninstallRun]
Filename: regsvr32; WorkingDir: {app}; Parameters: /s /u vendor\screen-capture-recorder-x64.dll; Check: IsWin64
Filename: regsvr32; WorkingDir: {app}; Parameters: /s /u vendor\audio_sniffer-x64.dll; MinVersion: 0,6.0.6000; Check: IsWin64

[Code]
var
  DocsPage: TWizardPage;
  InstallDocsCheckBox: TNewCheckBox;
  DocsLabel: TNewStaticText;

procedure InitializeWizard;
begin
  { Create custom page for documentation option }
  DocsPage := CreateCustomPage(wpSelectTasks, 'Documentation', 'Choose whether to install documentation');
  
  { Create label }
  DocsLabel := TNewStaticText.Create(DocsPage);
  DocsLabel.Parent := DocsPage.Surface;
  DocsLabel.Caption := 'GoExport includes comprehensive documentation files that explain' + #13#10 +
                       'features, configuration, and troubleshooting. Select the option' + #13#10 +
                       'below if you would like to install these files locally.';
  DocsLabel.Left := ScaleX(0);
  DocsLabel.Top := ScaleY(0);
  DocsLabel.Width := DocsPage.SurfaceWidth;
  DocsLabel.Height := ScaleY(60);
  DocsLabel.AutoSize := False;
  DocsLabel.WordWrap := True;
  
  { Create checkbox }
  InstallDocsCheckBox := TNewCheckBox.Create(DocsPage);
  InstallDocsCheckBox.Parent := DocsPage.Surface;
  InstallDocsCheckBox.Caption := 'Install documentation files (located in /docs/)';
  InstallDocsCheckBox.Left := ScaleX(0);
  InstallDocsCheckBox.Top := ScaleY(80);
  InstallDocsCheckBox.Width := DocsPage.SurfaceWidth;
  InstallDocsCheckBox.Height := ScaleY(20);
  InstallDocsCheckBox.Checked := True;  { Default to checked }
end;

function ShouldInstallDocs: Boolean;
begin
  { Return the state of the checkbox }
  Result := InstallDocsCheckBox.Checked;
end;
